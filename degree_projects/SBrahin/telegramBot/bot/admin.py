import json
import string

from aiogram import F, Router, types, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram import flags
from aiogram.fsm.context import FSMContext
import utils
from states import Gen

import kb
import text


router = Router()

#–°—Ç–∞—Ä—Ç –±–æ—Ç–∞ —Ç–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer(text.greet.format(name=msg.from_user.full_name), reply_markup=kb.menu)
#–í–∏—Ö—ñ–¥ –∑ —Ä–æ–∑–¥—ñ–ª—É –≤ –∑–∞–≥–∞–ª—å–Ω–µ –º–µ–Ω—é
@router.message(F.text == "–ú–µ–Ω—é")
@router.message(F.text == "–í–∏–π—Ç–∏ –≤ –º–µ–Ω—é")
@router.message(F.text == "‚óÄÔ∏è –í–∏–π—Ç–∏ –≤ –º–µ–Ω—é")
async def menu(msg: Message):
    await msg.answer(text.menu, reply_markup=kb.menu)
#–ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
@router.callback_query(F.data == "generate_text")
async def input_text_prompt(clbck: CallbackQuery, state: FSMContext):
    await state.set_state(Gen.text_prompt)
    await clbck.message.edit_text(text.gen_text)
    await clbck.message.answer(text.gen_exit, reply_markup=kb.exit_kb)

@router.message(Gen.text_prompt)
@flags.chat_action("typing")
async def generate_text(msg: Message):
    prompt = msg.text
    mesg = await msg.answer(text.gen_wait)
    res = await utils.generate_text(prompt)
    if not res:
        return await mesg.edit_text(text.gen_error, reply_markup=kb.iexit_kb)
    await mesg.edit_text(res[0] + text.text_watermark, disable_web_page_preview=True)
#–ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
@router.callback_query(F.data == "generate_image")
async def input_image_prompt(clbck: CallbackQuery, state: FSMContext):
    await state.set_state(Gen.img_prompt)
    await clbck.message.edit_text(text.gen_image)
    await clbck.message.answer(text.gen_exit, reply_markup=kb.exit_kb)

@router.message(Gen.img_prompt)
@flags.chat_action("upload_photo")
async def generate_image(msg: Message):
    prompt = msg.text
    mesg = await msg.answer(text.gen_wait)
    img_res = await utils.generate_image(prompt)
    if len(img_res) == 0:
        return await mesg.edit_text(text.gen_error, reply_markup=kb.iexit_kb)
    await mesg.delete()
    await mesg.answer_photo(photo=img_res[0], caption=text.img_watermark)

#–ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
@router.callback_query(F.data == "buy_tokens")
async def input_text_prompt(clbck: CallbackQuery):
    await clbck.message.answer_invoice(
        #chat_id=message.chat.id,
        title='–î–æ–Ω–∞—Ç –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏',
        description='–í–∞—à—ñ –¥–æ–Ω–∞—Ç–∏, —Å–ø–æ–Ω—É–∫–∞—é—Ç—å –Ω–∞—Å —Ä–æ–±–∏—Ç–∏ —Å–≤—ñ—Ç –∫—Ä–∞—â–µ',
        payload='Payment through a bot',
        provider_token='410694247:TEST:296110f2-5788-4755-ad89-57831f43bfe1',
        currency='uah',
        prices=[
            LabeledPrice(
                label='–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç—É',
                amount= 1000
            )
        ],
        max_tip_amount=100000,
        suggested_tip_amounts=[5000, 10000, 50000, 100000],
        start_parameter='',
        provider_data=None,
        photo_url='https://cdn.create.vista.com/api/media/medium/398454150/stock-photo-cropped-view-woman-putting-coin-penny-jar-donate-lettering-wooden?token=',
        photo_size=100,
        photo_width=800,
        photo_height=450,
        need_name=True,
        need_phone_number=True,
        need_email=True,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,
        disable_notification=False,
        protect_content=False,
        reply_to_message_id=None,
        allow_sending_without_reply=True,
        reply_markup=None,#######################################
        request_timeout=15
    )

#–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –±–æ–∫—É
@router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

#–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏
@router.message(F.content_type==types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    await message.delete()
    msg=f'ü•≥ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –¥–æ–Ω–∞—Ç {message.successful_payment.total_amount // 100} {message.successful_payment.currency}.'\
        f'\r \n–í–∞—à—É –¥–æ–ø–æ–º–æ–≥—É –Ω–µ –æ—Ü—ñ–Ω–∏—Ç–∏üòá'
    await message.answer(msg)
    await message.answer(text.gen_exit, reply_markup=kb.exit_kb )

#–ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏
@router.callback_query(F.data == "help")
async def input_text_prompt(clbck: CallbackQuery):
    await clbck.message.answer(text.help_t)
    await clbck.message.answer(text.gen_exit, reply_markup=kb.exit_kb)


#–§—ñ–ª—å—Ç—Ä –º–∞—Ç—É
@router.message()
async def echo_send(message: types.Message):
    if {i.lower().translate(str.maketrans("",'',string.punctuation)) for i in message.text.split(' ')}\
        .intersection(set(json.load(open('censor.json')))) != set():
        await message.reply('–°–ø—ñ–ª–∫—É–π—Ç–µ—Å—å –≤–≤—ñ—á–ª–∏–≤–æ!')
        await message.delete()
